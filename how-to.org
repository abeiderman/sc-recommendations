* The code
** Setting up
*** maven
**** bring in apache-mahout 0.9 in pom.xml deps
*** create data dir
**** grouplens.org to get the movielens data
***** 100k
***** move u.data into data dir
*** simple logging facade slf4j
**** version 1.7.5
*** guava libraries using
**** version 3.2
** Implementing algos
*** TODO Map Ids to names
* Mahout notes
** Collaborative Filtering w/ Apache Mahout ([[http://ssc.io/wp-content/uploads/2013/02/cf-mahout.pdf][The Paper]])
*** Preference Data
**** DataModel
     - (user,item,rating) in a preference obj
     - prefrence array encapsulates set   
     - data model holds all known interaction
     - DataModel dataModel = new FileDataModel(new File("movielens.csv"));
       - PreferenceArray prefsOfUser = dataModel.getPreferencesFromUser(userID);
**** Recommender class
     - List<RecommendedItem> topItems = recommender.recommend(userID,10);
     - float preference = recommender.estimatePreference(userID,itemID);
***** Get top N recommendations for a user
***** Get an estimated preference for a user and an item
***** Mahout provides a customizable CandidateItemsStrategy class, which is responsible for fetching all items that might be recommended for a particular user. Furthermore, a user can provide a Rescorer to postprocess recommendations, e.g. to emphasize special offers.
*** Neighborhood methods
    - They are also known as k-nearest neighbor methods as they compute recommendations by either finding users with similar taste or items that have been similarly rated. Mahout provides implementations for both, the user based and the item-based approach.
**** User Based
    - In a UserBasedRecommender, a UserNeighborhood selects users that act as a jury for finding items to recommend.
**** Item Based
    - Due to its simplicity and scalability, the item-based approach represents the most widely deployed recommendation algorithm.
    - In Mahout, the item-based approach is realized by an ItemBasedRecommender together with a measure to compute similarities between items, represented by an ItemSimilarity.
    - ItemBasedRecommender recommender = new GenericItemBasedRecommender(dataModel, new PearsonCorrelationSimilarity(dataModel));
    - List<RecommendedItem> similarItems = recommender.mostSimilarItems(itemID,3);
*** Latent Models
    - Made popular during the netflix contest
    - Factorizer factorizer = new SVDPlusPlusFactorizer(dataModel, numFeatures,numIterations);
    - Recommender recommender = new SVDRecommender(dataModel,factorizer);
    - List<RecommendedItem> topItems = recommender.recommend(userID,10);
*** Evaluation
*** Future Direction
